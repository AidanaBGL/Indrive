# demo.py
# -*- coding: utf-8 -*-
"""
Streamlit –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å —Ç—Ä–µ–º—è –∫–Ω–æ–ø–∫–∞–º–∏ –≤ —Å–∞–π–¥–±–∞—Ä–µ:
1) ¬´–Ω–∞–π—Ç–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è¬ª ‚Äî –∏–Ω—Ñ–µ—Ä–µ–Ω—Å YOLOv8 –ø–æ –≤–∞—à–µ–º—É –≤–µ—Å—É
2) ¬´–Ω–∞–π—Ç–∏ –∑–∞–≥—Ä—è–∑–Ω–µ–Ω–∏—è¬ª ‚Äî –±–∏–Ω–∞—Ä–Ω–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è VGG16 (clean/dirty)
3) ¬´–ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é¬ª ‚Äî –∑–∞–≥–ª—É—à–∫–∞ —Ñ–æ—Ä–º—ã

–ü–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º:
  pip install streamlit ultralytics torch torchvision pillow

–ó–∞–ø—É—Å–∫:
  streamlit run demo.py
"""

import os
from io import BytesIO
from typing import Optional, Union

import streamlit as st
from PIL import Image
import torch
import torchvision.transforms as T

# -----------------------------
# –ü—É—Ç–∏ –∏–∑ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
# -----------------------------
YOLO_WEIGHTS = "trained.pt"
YOLO_TEST_IMG = "sample_images_for_tests/images.jpeg"
VGG16_WEIGHTS = "vgg16_dirty_clean_best.pth"

# -----------------------------
# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
# -----------------------------
st.set_page_config(page_title="–ò–Ω—Å–ø–µ–∫—Ü–∏—è –∞–≤—Ç–æ: –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è –∏ –∑–∞–≥—Ä—è–∑–Ω–µ–Ω–∏—è", layout="wide")

# -----------------------------
# –ö–µ—à–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É –º–æ–¥–µ–ª–µ–π
# -----------------------------
@st.cache_resource(show_spinner=False)
def load_yolo_model(weights_path: str):
    from ultralytics import YOLO
    if not os.path.exists(weights_path):
        raise FileNotFoundError(f"–ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª –≤–µ—Å–æ–≤ YOLO: {weights_path}")
    return YOLO(weights_path)

@st.cache_resource(show_spinner=False)
def build_vgg16_binary(weights_path: str):
    from torchvision import models
    model = models.vgg16(weights=None)
    in_features = model.classifier[-1].in_features
    new_classifier = list(model.classifier)
    new_classifier[-1] = torch.nn.Linear(in_features, 2)  # 2 –∫–ª–∞—Å—Å–∞: clean/dirty
    model.classifier = torch.nn.Sequential(*new_classifier)

    if not os.path.exists(weights_path):
        raise FileNotFoundError(f"–ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª –≤–µ—Å–æ–≤ VGG16: {weights_path}")

    state = torch.load(weights_path, map_location="cpu")
    if isinstance(state, dict) and "state_dict" in state:
        state = state["state_dict"]
    model.load_state_dict(state, strict=False)
    model.eval()
    return model

@st.cache_resource(show_spinner=False)
def vgg_transform():
    return T.Compose([
        T.Resize((224, 224)),
        T.ToTensor(),
        T.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]),
    ])

# -----------------------------
# –£—Ç–∏–ª–∏—Ç—ã —Ä–∞–±–æ—Ç—ã —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
# -----------------------------
def open_image_any(source: Union[str, bytes, BytesIO, Image.Image]) -> Image.Image:
    """–û—Ç–∫—Ä—ã—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ RGB."""
    if isinstance(source, Image.Image):
        return source.convert("RGB")
    if isinstance(source, (bytes, BytesIO)):
        return Image.open(BytesIO(source if isinstance(source, bytes) else source.getvalue())).convert("RGB")
    if isinstance(source, str) and os.path.exists(source):
        return Image.open(source).convert("RGB")
    raise ValueError("–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")

def make_yolo_source(uploaded_file, fallback_path: Optional[str]) -> Optional[Union[Image.Image, str]]:
    """
    –í–µ—Ä–Ω—É—Ç—å —Ç–∏–ø, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π Ultralytics:
      - –µ—Å–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª -> PIL.Image
      - –∏–Ω–∞—á–µ -> –ø—É—Ç—å –∫ fallback-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é, –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    """
    if uploaded_file is not None:
        uploaded_file.seek(0)
        return Image.open(BytesIO(uploaded_file.read())).convert("RGB")
    if fallback_path and os.path.exists(fallback_path):
        return fallback_path
    return None

# -----------------------------
# UI: Sidebar
# -----------------------------
st.sidebar.title("–ù–∞–≤–∏–≥–∞—Ü–∏—è")
btn_damage = st.sidebar.button("–Ω–∞–π—Ç–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è", use_container_width=True)
btn_dirty  = st.sidebar.button("–Ω–∞–π—Ç–∏ –∑–∞–≥—Ä—è–∑–Ω–µ–Ω–∏—è", use_container_width=True)
btn_reg    = st.sidebar.button("–ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é", use_container_width=True)
st.sidebar.markdown("---")
st.sidebar.caption("Demo ‚Ä¢ YOLOv8 + VGG16")

# -----------------------------
# –ì–ª–∞–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å
# -----------------------------
st.title("üöó –ò–Ω—Å–ø–µ–∫—Ü–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è")
st.write("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –ª–µ–≤–æ–π –ø–∞–Ω–µ–ª–∏ –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å–≤–æ—ë –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∏–∂–µ.")

with st.expander("–ò—Å—Ç–æ—á–Ω–∏–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)"):
    uploaded = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (jpg/png)", type=["jpg", "jpeg", "png"])
    st.caption(f"–ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {YOLO_TEST_IMG}")

# -----------------------------
# –ö–Ω–æ–ø–∫–∞ 1: YOLO ‚Äî –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è
# -----------------------------
if btn_damage:
    st.subheader("üîé –ü–æ–∏—Å–∫ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π (YOLOv8)")
    try:
        yolo_source = make_yolo_source(uploaded, YOLO_TEST_IMG)
        if yolo_source is None:
            st.error("–ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—É—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")
        else:
            model = load_yolo_model(YOLO_WEIGHTS)
            results = model(yolo_source)
            res = results[0]

            # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è: res.plot() -> np.ndarray –≤ BGR, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB –¥–ª—è PIL
            plotted_bgr = res.plot()
            img_rgb = Image.fromarray(plotted_bgr[:, :, ::-1])
            st.image(img_rgb, caption="–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–µ—Ç–µ–∫—Ü–∏–∏ (YOLOv8)", use_column_width=True)

            # –¢–∞–±–ª–∏—Ü–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
            if getattr(res, "boxes", None) is not None and len(res.boxes) > 0:
                import pandas as pd
                names = res.names if hasattr(res, "names") else {}
                rows = []
                for b in res.boxes:
                    cls_id = int(b.cls.item()) if hasattr(b.cls, "item") else int(b.cls)
                    conf = float(b.conf.item()) if hasattr(b.conf, "item") else float(b.conf)
                    xyxy = b.xyxy[0].tolist()
                    rows.append({
                        "label": names.get(cls_id, str(cls_id)),
                        "confidence": round(conf, 3),
                        "x1": int(xyxy[0]),
                        "y1": int(xyxy[1]),
                        "x2": int(xyxy[2]),
                        "y2": int(xyxy[3]),
                    })
                st.dataframe(pd.DataFrame(rows), use_container_width=True)
            else:
                st.info("–û–±—ä–µ–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")

            # –î–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏ ‚Äî —Å—Ç—Ä–æ–∫–∞ –∏–∑ –≤–∞—à–µ–≥–æ –ø—Ä–∏–º–µ—Ä–∞:
            st.code("/hdd/home/ABaglanova/indrive_hack/images.jpeg: 448x640 1 scratch, 1 shattered_glass, 9.2ms")
    except Exception as e:
        st.exception(e)

# -----------------------------
# –ö–Ω–æ–ø–∫–∞ 2: VGG16 ‚Äî –∑–∞–≥—Ä—è–∑–Ω–µ–Ω–∏—è
# -----------------------------
if btn_dirty:
    st.subheader("üßº –ü–æ–∏—Å–∫ –∑–∞–≥—Ä—è–∑–Ω–µ–Ω–∏–π (VGG16)")
    try:
        # –ò—Å—Ç–æ—á–Ω–∏–∫ –±–µ—Ä—ë–º —Ç–æ—Ç –∂–µ: –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –∏–ª–∏ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –ø—É—Ç—å
        source = make_yolo_source(uploaded, YOLO_TEST_IMG)
        if source is None:
            st.error("–ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—É—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")
        else:
            # –î–ª—è VGG –∏—Å–ø–æ–ª—å–∑—É–µ–º PIL.Image (–µ—Å–ª–∏ –ø—Ä–∏—à—ë–ª –ø—É—Ç—å, –æ—Ç–∫—Ä–æ–µ–º)
            img = source if isinstance(source, Image.Image) else open_image_any(source)

            model_vgg = build_vgg16_binary(VGG16_WEIGHTS)
            tfm = vgg_transform()
            with torch.no_grad():
                x = tfm(img).unsqueeze(0)
                logits = model_vgg(x)
                prob = torch.softmax(logits, dim=1)[0]
                # –î–æ–ø—É—Å—Ç–∏–º: –∏–Ω–¥–µ–∫—Å 0 ‚Äî clean, –∏–Ω–¥–µ–∫—Å 1 ‚Äî dirty (–ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–º–µ–Ω—è–π—Ç–µ –º–µ—Å—Ç–∞–º–∏)
                p_clean = float(prob[0].item())
                p_dirty = float(prob[1].item())

            col_img, col_stats = st.columns([2, 1])
            with col_img:
                st.image(img, caption="–ò—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", use_column_width=True)
            with col_stats:
                st.metric("–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å '–∑–∞–≥—Ä—è–∑–Ω–µ–Ω–æ'", f"{p_dirty*100:.1f}%")
                st.progress(min(1.0, p_dirty))
                st.caption(f"clean: {p_clean:.3f} ‚Ä¢ dirty: {p_dirty:.3f}")

            verdict = "–ó–ê–ì–†–Ø–ó–ù–ï–ù–û" if p_dirty >= 0.5 else "–ß–ò–°–¢–û"
            st.success(f"–í–µ—Ä–¥–∏–∫—Ç: {verdict}")
    except Exception as e:
        st.exception(e)

# -----------------------------
# –ö–Ω–æ–ø–∫–∞ 3: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è (–∑–∞–≥–ª—É—à–∫–∞)
# -----------------------------
if btn_reg:
    st.subheader("ü™™ –ü—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é")
    st.info("–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –ó–¥–µ—Å—å –ø–æ—è–≤–∏—Ç—Å—è —Ñ–æ—Ä–º–∞ —Å –ø–æ–ª—è–º–∏ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π.")
    with st.form("reg_form", clear_on_submit=True):
        name = st.text_input("–ò–º—è")
        phone = st.text_input("–¢–µ–ª–µ—Ñ–æ–Ω")
        email = st.text_input("E-mail")
        agree = st.checkbox("–°–æ–≥–ª–∞—Å–µ–Ω –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
        submitted = st.form_submit_button("–û—Ç–ø—Ä–∞–≤–∏—Ç—å")
        if submitted:
            if not agree:
                st.error("–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö.")
            else:
                st.success("–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! (–¥–µ–º–æ)")

st.markdown("---")
st.caption("¬© 2025 ‚Ä¢ Demo App: YOLOv8 + VGG16")
